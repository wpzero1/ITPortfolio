-- 5.join.sql

/*
1. 조인이란?
	다수의 table간에  공통된 데이터를 기준으로 검색하는 명령어
	(물리적으로 구분된 다른 테이블 및 동일한 테이블에서 논리적으로 다른 테이블인듯한 구조로 검색)
	- 사원의 상사 이름 검색
	emp table(empno, ename, hiredate, sal, deptno, job, mgr..)

2. 사용 table 
	1. emp & dept 
	  : deptno 컬럼을 기준으로 연관되어 있음

	 2. emp & salgrade
	  : sal 컬럼을 기준으로 연관되어 있음


3. table에 별칭 사용 
	

4. 조인 종류 
	1. 동등 조인(equi)
		 = 동등비교 연산자 사용
		 : 사용 빈도 가장 높음
		 : 테이블에서 같은 조건이 존재할 경우의 값 검색 

	2. not-equi 조인
		: 100% 일치하지 않고 특정 범위내의 데이터 조인시에 사용
		: between ~ and(비교 연산자)

	3. self 조인 
		: 동일 테이블 내에서 진행되는 조인
		: 동일 테이블 내에서 상이한 칼럼 참조
			emp의 empno[사번]과 mgr[사번] 관계

	4. outer 조인 
		: null값이 검색되지 않는 문제를 해결하기 위해 사용되는 조인
		  null 값이기 때문에 배제된 행을 결과에 함께 검색하기 위한 조인
		
		: oracle DB의 sql인 경우 데이터가 null 쪽 table 에 + 기호 표기 */

-- 1. dept table의 구조 검색
desc dept;
-- dept table의 모든 데이터 검색
select * from dept;



--*** 1. 동등 조인 ***

-- 2. SMITH 의 이름, 사번, 근무지역(부서위치) 정보를 검색

	-- SMITH의 이름(ename, 사번(empno), 근무지역(부서위치 dept의 loc) 정보를 검색
	
	select ename, empno, loc
	from emp, dept
	where ename = 'SMITH' and deptno=deptno;
	
	- 여기에는 문제가 있다. 테이블 명을 적어야함. 테이블명.컬럼명
	
	select ename, empno, loc
	from emp, dept
	where ename = 'SMITH' and emp.deptno=dept.deptno;
	
	--같은 컬럼을 공유하기 때문에 이어주기 위해 emp 테이블 컬럼과 dept테이블의 컬럼의 deptno와 같다고 하고 사용
	--where절은 group by가 없을 때 씀

	select ename, empno, loc
	from emp e, dept d
	where ename = 'SMITH' and e.deptno=d.deptno;
	
	-- table 별칭 부여하기 : as 붙이면 안됨.
	-- 테이블 수에 별칭을 from 쓸때 붙여줌.

-- 3. deptno가 동일한 모든 데이터 검색
	-- emp, dept
	select * from emp, dept
	where emp.deptno = dept.deptno;
	
	--이것의 문제는 deptno 값이 중복됨
	--해결책 : *을 쓰는게 아니라 ename, ..., emp.deptno 처럼 모든 컬럼 명을 기술
	-- 즉 deptno는 하나의 table명.deptno로 검색


-- 4. 2+3 번 항목 결합해서 SMITH에 대한 모든 정보 검색하기
	--생략.

-- 5.  SMITH에 대한 이름(ename)과 부서번호(deptno), 부서명(dept의 dname) 검색하기

	select ename, e.deptno, dname
	from emp e, dept d
	where ename = 'SMITH' and e.deptno = d.deptno;

	--select에서 하나만 테이블 하나만 정해줘야함.

	/* --여기서 궁금증... 조인을 안한 상태에서, select에서 골라줄 때 e에 속한지 d에 속한지 각각 할 때.
	
	select ename, e.deptno, dname
	from emp e, dept d
	where ename = 'SMITH';
	
	select ename, d.deptno, dname
	from emp e, dept d
	where ename = 'SMITH';
	
	--두개가 결과값이 다름... 이런 것을 파악해야 진짜다.
	--dname까지 걸려있기 때문에 4개의 데이터가 같은 SMITH의 이름으로 다 나온다
	
	*/
	
	
	
-- 6. 조인을 사용해서 뉴욕에 근무하는 사원의 이름과 급여를 검색 
-- loc='NEW YORK', ename, sal

	select ename, sal, loc
	from emp e, dept d
	where d.loc = 'NEW YORK' and e.deptno = d.deptno;
	

-- 7. 조인 사용해서 ACCOUNTING 부서(dname)에 소속된 사원의 이름과 입사일 검색

	select ename, hiredate
	from emp e, dept d
	where dname = 'ACCOUNTING' and e.deptno = d.deptno;


-- 8. 직급이 MANAGER인 사원의 이름, 부서명 검색

	select ename, dname
	from emp e, dept d
	where job = 'MANAGER' and e.deptno = d.deptno;


-- *** 2. not-equi 조인 ***

-- salgrade table(급여 등급 관련 table)
-- 9. 사원의 급여가 몇 등급인지 검색
-- between ~ and 

	select sal, grade
	from emp, salgrade
	where sal between losal and hisal;
	--여기서 losal과 hisal의 대소문자는 중요하지 않음
	
	--조건문을 빼면? grade 수만큼 급여가 쫙 다 매핑되서 나옴... 논리적 오류.(문법은 맞는데) 제약조건의 미흡함
	
--? 등급이 3등급인 사원들의 이름과 급여 검색

	select ename, sal
	from emp, salgrade
	where  grade = 3 and sal between losal and hisal;

	--등급부터 먼저 걸러내는게 더 좋을 것 같다..?

-- 10. 사원(emp) 테이블의 부서 번호(deptno)로 부서 테이블을 참조하여 사원명, 부서번호, 부서의 이름(dname) 검색

	--의도 : not-equi 학습 후 문제를 보고 동등조인인지 not-equi 조인인지를 구분하는 눈 기르기.

	select ename, e.deptno, dname
	from emp e, dept d
	where e.deptno = d.deptno;


-- *** 3. self 조인 ***

-- 11. SMITH 직원의 메니저 이름 검색
-- 직원 table : emp e[ename, empno, mgr]
-- 메니저 table : emp m[empno, ename]
	/* SMITH의 상사 이름을 알기 위한 hint는 emp table의 mgr
		mgr은 사번이다. 사번으로 검색해서 ename을 뽑아내자.
	결론 : table은 하나, 단 논리적으로 두개의 테이블로 연상할 것!
	
	같은 테이블에 있지만, 상사 테이블을 emp m 이라는 것으로 새로 생각해보자
	e.mgr = m.empno 에서 주의. m.mgr과는 사실은 같은 테이블이므로 이것이 아니라 empno와 비교해야함.
	
	*/
	
	select m.ename
	from emp e, emp m
	where e.ename='SMITH' and e.mgr=m.empno;
	
	

--12. 메니저가 KING인 사원들의 이름과 직급 검색
-- m : ename = 'KING'
-- e : ename, job

	select e.ename, e.job
	from emp e, emp m
	where m.ename='KING' and m.empno=e.mgr;

	/* 해설
	사원 table 명 = e, 상사 = m
	매니저가 KING : 매니저 이름이 KING m.ename = 'KING'
	사원들의 이름과 직급 : e table의 ename, job	
	그리고 이 KING의 empno(사번)과, 사원테이블에서 상사사번을 뜻하는 MGR과 같은 것을 찾는다. 라는 흐름! m.empno=e.mgr (추가 제약)
	*/

--13. SMITH와 동일한 근무지에서 근무하는 사원의 이름 검색
-- SMITH 데이터 절대 검색 불가
-- SMITH동일 근무지 - deptno로 검색
-- deptno가 일치되는 사원의 이름 -  ename

	SMITH와 동일한 근무지를 찾자. - deptno가 같은 사람
	그 근무지와 동일한 사원의 이름을 찾기 - ename
	s : smith의 근무지
	c : coworker의 근무지
	
	select c.ename
	from emp s, emp c
	where s.ename = 'SMITH'
		  and c.ename != 'SMITH' --SMITH가 나오는걸 막는 제약조건을 더 넣어줘야함
		  and s.deptno = c.deptno;
		  

--*** 4. outer join ***
-- 14. 모든 사원명, 메니저 명 검색, 단 메니저가 없는 사원도 검색되어야 함
-- null값을 포함한 검색도 반드시 필수

	e
	m

	select e.ename 사원명, m.ename 매니저명
	from emp e, emp m
	where e.mgr = m.empno(+);
	
	-- e 테이블에서는 KING의 mgr값이 null이다. 이것과 m 테이블을 연결해줘야하는데, m 테이블의 empno에 이를 받아줄 데이터(null)가 존재하지 않아 매핑될 수가 없다. 그래서 m 테이블의 empno에 + 해줘야함.


-- 15. 모든 직원명, 부서번호, 부서명 검색
-- 부서 테이블의 40번 부서와 조인할 사원 테이블의 분서 번호가 없지만,
-- outer join이용해서 40번 부서의 부서 이름도 검색하기 

	select ename, e.deptno, dname
	from emp e, dept d
	where e.deptno(+) = d.deptno;
	
	--
	
	select ename, d.deptno, dname
	from emp e, dept d
	where e.deptno(+) = d.deptno;
	
	--아래것만 됨. d.deptno로 컬럼 명칭만 바꿔주었더니... 있는 컬럼을 소환해야함. 그리고 +는 그 값이 없는 쪽에다 붙이는 것. emp에는 40번이 없으니까.



