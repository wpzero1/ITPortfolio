--8.DML.sql
/* 
- DML : Data Mainpulation Language
- DML 문장 실행 후 실제 사용을 위해서는 반드시 영구 저장 작업 필수
	(DDL 때는 테이블 작업해주면 영구저장이 자동으로 되는데..)
- *** : commit : 영구저장, rollback : 복원 문장 필수
		- auto commit 기능의 tool 사용시 개념을 잊으시면 안됨
- *** : tip - app~개발시 db에 insert한 데이터는 반드시 commit 필수 



*** 용어 정리 ***
	1. select : 검색 = query = 질의
	2. insert/update/delete = dml
	3. create/drop/alter = ddl
	1+2+3 = sql				
	
1. insert sql문법
	1-1. 모든 칼럼에 데이터 저장
		insert into table명 values(데이터값1, ...)

	1-2.  특정 칼럼에만 데이터 저장
		insert into table명 (칼럼명1,...) values(칼럼과매핑될데이터1...)

	1-3. 하나의 sql문장으로 다수의 table에 데이터 입력 방법 (, 없는거 주의)
		insert all 
			into table명 [(칼럼명,...)] values(데이터,,,)		
			into table명 [(칼럼명,...)] values(데이터,,,)		
		select 검색칼럼 from....;

2. update 
	2-1. 모든 table(다수의 row)의 데이터 한번에 수정
		- where조건문 없는 문장
		- update table명 set 칼럼명=수정데이타;

	2-2. 특정 row값만 수정하는 방법
		- where조건문으로 처리하는 문장
		- update table명 set 칼럼명=수정데이타 where 조건sql;
*/

/*
drop table people;
create table people(
	name varchar2(10),
	age number(3)
);
*/

-- *** insert ****
--1. 칼럼명 기술없이 데이터 입력
insert into people values ('커피맨', 27);
select * from people;

--저장을 위해 commit;
--commit 이후에 수정한 사항에 대해 돌리고 싶으면 rollback;

--2. 칼럼명 기술후 데이터 입력 
--컬럼명 명시 따라서 컬럼 순서에 맞게 데이터만 values 속성에 셋팅
insert into people (name, age) values ('jyp', 26);
insert into people (age, name) values (26, '진영');
--참고로 이미 칼럼명은 기술되어서 순서는 바꿔서 기술해도 된다.
commit;


--3. 다중 table에 한번에 데이터 insert하기 
-- 이미 존재하는 table의 데이터를 기반으로 다수의 table에 insert하기
drop table emp01;
drop table emp02;
create table emp01 as select empno, ename, deptno from emp where 1=0;
create table emp02 as select empno, ename, deptno from emp where 1=0;

--2번 구조를 참고해서 insert all과 select문 사이에 어떤 정보를 넣을지 작성 into 문장에서 끝부분 쉼표 안넣기.
insert all
	into emp01 (empno, ename, deptno) values (empno, ename, deptno)
	into emp02 (empno, ename, deptno) values (empno, ename, deptno)
select empno, ename, deptno from emp;

select * from emp01;
select * from emp02;




--4. ? 부서 번호가 10인 데이터는 emp01에 저장, 
-- 부서 번호가 20 or 30인 데이터는 emp02에 저장
truncate table emp01;
truncate table emp02;

insert all
	when deptno=10 then
		into emp01 (empno, ename, deptno) values (empno, ename, deptno)
	when deptno=20 or deptno=30 then
		into emp02 (empno, ename, deptno) values (empno, ename, deptno)
	select empno, ename, deptno from emp;

select * from emp01;
select * from emp02;



truncate table emp01;
truncate table emp02;




select * from emp01;
select * from emp02;




-- *** update ***
--1. 테이블의 deptno의 모든 행 변경
drop table emp01;
create table emp01 as select * from emp;
select deptno from emp01;

update emp01 set deptno=60;


--2. ? emp01 table의 모든 사원의 급여를 10% 인상하기
 --힌트 : update절 set절 where절
update emp01 set sal = sal*1.1;
 
 select sal from emp01;



select sal from emp01;


--3. emp01의 모든 사원의 입사일을 오늘로 바꿔주세요
update emp01 set hiredate=sysdate;
select hiredate from emp01;

-- 4. 급여가 3000이상인 사원의 급여만 10%인상
drop table emp01;
create table emp01 as select * from emp;
select sal from emp01;

update emp01 set sal = sal*1.1
where sal>=3000

select sal from emp01;

--5. ?emp01 table 사원의 급여가 1000이상인 사원들의 급여만 500원씩 삭감 
drop table emp01;
create table emp01 as select * from emp;
select sal from emp01;
update emp01 set sal = sal-500
where sal>=1000

select sal from emp01;


--6. emp01 table에 DALLAS(dept의 loc)에 위치한 부서의 소속 사원들의 급여를 1000인상
-- 서브쿼리 사용

update emp01 set sal = sal+1000
where deptno=(select deptno
			  from dept
			  where loc='DALLAS');


--7. emp01 table의 SMITH 사원의 부서 번호를 30으로, 직급은 MANAGER 수정
-- 두개 이상의 칼럼값 동시 수정 : , 로 연결해서 써주기
select deptno, job from emp01 where ename='SMITH';
update emp01 set deptno = 30, job = 'MANAGER' where ename = 'SMITH';

select deptno, job from emp01 where ename='SMITH';



-- *** delete ***
--truncate는 데이터 삭제 후 복구 불가능. 테이블만 다날리는 drop과는 다르게 데이터만 다 날린다
--delete는 데이터 삭제 후 commit 명령 전에는 복구 가능
/* truncate : delete 중 실행 속도는? 전자.

*/
--8. 하나의 table의 모든 데이터 삭제
delete from emp01;

--9. 특정 row 삭제(where 조건식 기준)
drop table emp01;
create table emp01 as select * from emp;
select * from emp01;

--10번 부서 직원 모든 정보 삭제 후
delete from emp01 where deptno=10;
select * from emp01;

-역시 여기서도 영구삭제를 위해 commit 해야함

--10. emp01 table에서 comm 존재 자체가 없는(null) 사원 모두 삭제
drop table emp01;
create table emp01 as select * from emp;


select * from emp01;


--11. emp01 table에서 comm이 null이 아닌 사원 모두 삭제
drop table emp01;
create table emp01 as select * from emp;
delete from emp01 where comm is not null;

select * from emp01;


--12. emp01 table에서 부서명이 RESEARCH 부서에 소속된 사원 삭제 
-- 서브쿼리 활용
select * from emp01;

delete from emp01 where deptno = (select deptno from dept where dname = 'RESEARCH');
select * from emp01;



--13. table내용 삭제
-- db 활용 app~ 개발자가 개발시 유용한 sql[tip]
-- 해당 table의 모든 데이터를 삭제
delete from emp01;
commit;

truncate table emp01;



-- *** merge[병합] ***
--14. 병합을 위한 test table생성 및 데이터 insert
-- 판매 관련 table들
drop table produce01; -- 판매 A
drop table produce02; -- 판매 B
drop table produce_total; -- 집계 테이블

create table produce01(
	판매번호 varchar2(5), 
	제품번호 char(4),
	수량 number(3),
	금액 number(5)
);
create table produce02(
	판매번호 varchar2(5), 
	제품번호 char(4),
	수량 number(3),
	금액 number(5)
);
create table produce_total(
	판매번호 varchar2(5), 
	제품번호 char(4),
	수량 number(3),
	금액 number(5)
);

-- test용 데이터 insert
insert all
	into produce01 values('101', '1000', 1, 500)
	into produce01 values('102', '1001', 1, 400)
	into produce01 values('103', '1003', 1, 300)
	into produce02 values('201', '1004', 1, 500)
	into produce02 values('202', '1005', 1, 600)
	into produce02 values('203', '1006', 1, 700)
select * from dual; --데이터를 코드로 직접 넣어서... 잉여테이블 넣어줘야
commit;
select * from produce01;
select * from produce02;
select * from produce_total;

-- merge 작업 : produce01과 produce_total 병합
-- ? 문법 이해를 위한 문제 분석해 보기 
select * from produce_total;

merge into produce_total t
using produce01 p1
on (t.판매번호 = p1.판매번호)
when matched then
update set t.수량 = t.수량 + p1.수량
when not matched then
insert values(p1.판매번호, p1.제품번호, p1.수량, p1.금액);
	
	
--? produce02 table과 produce_total table 병합 
select * from produce_total;

merge into produce_total t
using produce02 p2
on (t.판매번호 = p2.판매번호)
when matched then
update set t.수량 = t.수량 + p2.수량
when not matched then
insert values(p2.판매번호, p2.제품번호, p2.수량, p2.금액);


select * from produce_total;


