Servlet 학습

1. http
	- 브라우저와 서버간의 통신시에 사용되는 약속(protocol)
	- w3에서 관리
	
2. 주요 API
	- http 통신 로직을 이미 100% 다 반영해서 완벽하게 구현한 API 다수 제공
		개발자들은 사용만 하면 됨
	- http 통신 기반의 자바 웹 어플리케이션 (tomcat이 만들어줌)
		1) client가 전송하는 데이터를 보유하게되는 API ex) 악플단 사람 id, ip 조회
			: HttpServletRequest
		2) 접속한 client에게만 응답하는 기능의 API
			: HttpServletResponse
		3) http를 고려해서 구현한 상위 클래스로 제공하는 API
			: HttpServlet
			
			- 문제
		 	Servlet A 객체 수 : HttpServletRequest 객체수  : HttpServletResponse 객체 수 : 접속한 클라이언트 수
		 	= 1 : 100 : 100 :100명
		 	
3.	client가 server에 요청하는 방식(스펙) (시키는 대로 하는거)
	ex id.pw 입력 -> id/pw 오픈되어 전송(보안 미고려) 하면 안되지..
	
		1) get 방식
			 - client가 서버에 데이터 전송시 url에 데이터가 오픈되어 전송
			 - 데이터 양이 소량일떄만 허용
			 - servlet API doGet()
			 - post라는 코드상의 명시 없이 url로 요청하는 모든 방식
			 	예 : http://www.daum.net
			 		 http://www.google.com
			 - 북마크용으로 사용되는 형태
			 - 물음표 상관없이.. url치고 들어가면 get.
			 		 
		2) post 방식
		 	 - client가 서버에 데이터 전송시 데이터가 은닉되어 전송
		 	 - 데이터 양이 많을때 사용하는 방식
		 	 - servlet API doPost()
		 	 
4. 상식
	*** url 요청시 url 값
	1. http://ip[도메인]:port/project명/file명
	2. port
		80 : http 통신 규약의 default port
			   생략시 무조건 80으로 간주
	3.url의 web query string
			http://ip:port/project/file명?key1=value1&key2=value2...
			key1~ 부터는 웹 쿼리 스트링
			서버에 전송되는 데이터를 표현하는 방식
	
	*** client가 웹상에 index.html을 요청해서 server가 응답하는 process
	
	1. 서버에 웹 실행 소스가 있어야 함
	2. 서버가 시작(실행)되어야 함
	3. 브라우저 실행해야함
	4. 브라우저에 url 입력해야함
	5. 서버가 요청을 받음
	6. 서버가 요청 받고 로직 처리 후 접속한 client에게 응답함
	
	
	
	http://www.naver.com:80/index.html -> 이렇게 입력하면 아래와같이 나온다
	http://www.naver.com