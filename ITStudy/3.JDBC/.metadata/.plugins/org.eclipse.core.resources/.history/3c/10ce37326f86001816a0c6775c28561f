package model;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import model.domain.DeptDTO;
import util.DBUtil;

public class DeptDAO {
	//모든 검색
	//select * from dept
		public static ArrayList <DeptDTO> getAll() throws Exception{ //던지면 받는것도 동시에 써야함.
			Connection con = null; //finally에서 쓰기 위해서 try문 밖에서 선언
			Statement stmt = null;
			ResultSet rs = null;
			ArrayList<DeptDTO> datas = null; //ArrayList 배열 생성 및 초기화
			
			try {
				con = DBUtil.getConnection(); //연결
				stmt = con.createStatement(); //sql실행 가능 메소드. 연결된 con을 같이 써줘야 불러올 수 있음
				rs = stmt.executeQuery("select * from dept");
				
				datas = new ArrayList<DeptDTO>(); //select가 이루어진 다음에 여기서 객체 만드는게 더 낫다고 봄.
				while(rs.next()) { //row값을 확인하는 것
					datas.add(new DeptDTO(rs.getInt(1), rs.getString(2), rs.getString(3)));
					//여기서 인덱스는 1부터 시작한다. 인덱스 하나씩 뽑아서 DeptDTO의 datas에 add로 넣어 새로운 객체 만드는 과정
					//이 문장 쓸 때, 
				}
			} catch (SQLException e) {
				e.printStackTrace();
				throw e; //catch 내에서 다시 던진다. 그래야만 엔드유저에게 상황전달 가능. (엔드유저, 개발자 모두가 상황을 알아야함)
			} finally { //try가 있어야만 쓸 수 있는 블록
				DBUtil.close(con, stmt, rs);
			}
			return null;
		}
	//deptno로 해당 부서 정보 검색
		
		public static DeptDTO getDept(int deptno) {
			return null;
		}
	
	//새로운 부서 정보 저장
		public static boolean insert(DeptDTO newDept) { //DTO객체가 아닌 변수로 일일히 다 넣어줄 수도 있지만
			//( int deptno, String dname) 처럼.. 그러나, 효율성 측면에서 DTO 객체
			return false;
		}
		
	//deptno로 loc 수정
		public static boolean update(int deptno, String newLoc) {
			return false;
		}
	
	//deptno로 해당 부서 삭제
		public static boolean delete(int deptno) {
			return false;
			
		}
	
}
