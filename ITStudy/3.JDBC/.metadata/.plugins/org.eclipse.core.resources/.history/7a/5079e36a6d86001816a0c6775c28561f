학습 내용

1. sql + 프로그램 연동
2. 사용 언어와 DB 종류
	Orcale, java[JDBC API]
3. JDBC API
	1) Java Database Connectivity 표준 API
	2) db 종류와 무관하게 동일한 코드로 개발
4. 예시
	Oracle : DB2 : MS Sql : My Sql : Maria : 큐브리드...
	각 DB와 접속을 위한 메소드
		Connection getConnection(String url, String id, String pw);
	자바 언어로 DB와 접속하고자 할때는 해당 메소드만 호출
		Connection con = getConnection("ip", "SCOTT", "TIGER");
	
	1) 접속을 위한 메소드는 반드시 다음과 같아야 함(rule = 스펙)
			- 명령문 + 미완성 메소드 선언구만 제시 - interface
			Connection getConnection(String url, String id, String pw);
			- (구) Sun microsystems에서 제시
			
	2) DB 벤더사는 스펙에 맞게 개발
			Connection getConnection(String url, String id, String pw){
			각 벤더사에 맞게 실제 완벽한 구현
			DB 접속 기능의 객체 생성해서 반환
			}
	3) DB를 사용하는 자바 개발자
	 - Connection con = getConnection("ip", "SCOTT", "TIGER");
	 
5. sqlplus로 DB와 소통하는 작업 단계 & java API(JDBC)와 매핑하는 단계
	1단계 - db 실행중..
	2단계 - 자바 코드 시작
	3단계 - db 접속 > sqlplus id/pw 엔터 : Connection 객체 생성 요청(url, id, pw)
	4단계 - 접속 완료 (Connection 객체 생성 완료 - DB접속 성공)
	5단계 - sql문장 작성 엔터
			  Statement 객체 생성 - sql문장 실행하는 자바 객체
			  sql문장 실행 메소드 실행
			  select - 결과집합(ResultSet)
			  	ResultSet executeQuery("Select문 실행메소드"){}
			  	
			  insert/update/delete[DML] - DB table에 영향을 미친 행수
			  	int executeUpdate("dml"){}
	6단계 - 결과를 output
		ResultSet
			결과 row 존재 여부 확인 가능 (사실 set 안에도 커서가 존재하는데, 데이터가 있나없나 확인을 위해 계속 움직인다)
				boolean next()
			해당 row의 특정 칼럼값 반환 가능
				int getInt()
				double getDouble()
				String getString("컬럼명" or 검색된컬럼순번)
				...
				
	
	7단계 - 결과 활용
	8단계 - exit 접속 해제
		close()
		
6. DB연동 프로그램 개발시 고려사항
	1) DB 시스템이 혹여 다운?
	2) DB의 ip가 변경?
	3) DB의 table의 구조 변경?
	4) sql문장 오류?
	-- SQLException으로 경우의 수 처리 필수로 유도(try, catch를 꼭 해야된다는 의미)
	
	* JDBC API - java.sql package
	
	
7. review [Design Pattern]
	1) DataTransfer Object(Value Object, Java Bean)
		- DTO/VO
	2) MVC
		- Model
		- View
		- Controller
	3) SingleTon pattern
	4) Data Access Object(DAO)
		- DB와 전담 소통을 하는 class
		- sql문장 + JDBC API로만 구성
		- DAO 클래스들이 공통적으로 사용하는 클래스 또 분리
		
		